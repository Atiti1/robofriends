{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","target","value","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Class","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCSCQ,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAgB,EAATC,GAC5B,OAEK,cADJ,CACI,OAAKC,UAAU,sDAAf,UACA,qBAAKC,IAAI,SAASC,IAAK,uCACvB,gCACA,6BAAKL,IACL,4BAAIC,WCWKK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEnB,OACG,8BAEOA,EAAOC,KAAI,SAACC,EAAMC,GACzB,OAAO,cAAC,EAAD,CAEPR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCMMC,EAdG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aACjC,OAEG,qBAAKV,UAAU,MAAf,SACA,uBACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCYCI,G,wDAnBd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,UAAU,GAHO,E,qDAMnB,SAAkBC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAI3B,WACC,OAAIG,KAAKJ,MAAMC,SACP,0DAEDG,KAAKL,MAAMO,a,GAhBOC,cCsDZC,E,kDA7Cd,aAAe,IAAD,8BACb,gBAcDC,eAAiB,SAACC,GAChB,EAAKL,SAAS,CAAEZ,YAAaiB,EAAMC,OAAOC,SAd3C,EAAKZ,MAAQ,CACZZ,OAAQ,GACFK,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OACnBoB,MAAM,8CACLvC,MAAK,SAAAwC,GAAQ,OAAGA,EAASC,UACzBzC,MAAK,SAAA0C,GAAK,OAAI,EAAKX,SAAS,CAAEjB,OAAQ4B,S,oBAQxC,WAAU,IAAD,EACwBZ,KAAKJ,MAA7BZ,EADA,EACAA,OAAQK,EADR,EACQA,YACVwB,EAAiB7B,EAAO8B,QAAO,SAAAC,GACpC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAS5B,EAAY2B,kBAEtD,OAAQhC,EAAOkC,OAIf,sBAAKC,MAAM,KAAX,UACA,6CACA,cAAC,EAAD,CAAW7B,aAAcU,KAAKK,iBACxB,iCACA,cAAC,EAAD,UACA,cAAC,EAAD,CAAUrB,OAAQ6B,WARtB,4D,GA1BcV,aCElBiB,IAASC,OAEP,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM3BzD,M","file":"static/js/main.667e2e54.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t//<h1>Robotfriends</h1>\r\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src={'https://robohash.org/${id}?200x200'} />  \r\n      <div>\r\n      <h2>{name}</h2>\r\n      <p>{email}</p>\r\n      </div>\r\n     </div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\t \r\n\treturn (\r\n    <div>\r\n          {\r\n          \trobots.map((user, i) => {\r\n    return <Card \r\n    key={i} \r\n    id={robots[i].id} \r\n    name={robots[i].name} \r\n    email={robots[i].email}\r\n    />\r\n\t})\r\n          }\r\n   </div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n\treturn (\r\n\r\n    <div className='pa2'>\r\n    <input \r\n    className='pa3 ba b--green bg-lightest-blue'\r\n    type='search' \r\n    placeholder='search robots' \r\n    onChange={searchChange}\r\n    />\r\n    </div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooops. That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {  Component } from 'react';\r\nimport CardList from '../components/CardList';\r\n//import { robots }   from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\n//import 'tachyons';\r\nimport './App.css'\r\n//import Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t        searchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(users => this.setState({ robots: users}));\r\n\t\t \r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\t this.setState({ searchfield: event.target.value })\r\n\t\t \r\n\t}\r\n\trender() {\r\n\t\tconst { robots, searchfield } = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t});\r\n\t\treturn !robots.length ?\r\n\t\t\t <h3> LOADING!!!!!!!!!!!!! </h3>\r\n\t\t: \r\n             (\r\n\t\t<div Class='tc'>\r\n\t\t<h1>RoboFriends</h1>\r\n\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n        <scroll>\r\n        <ErrorBoundry>\r\n        <CardList robots={filteredRobots} />\r\n        </ErrorBoundry>\r\n        </scroll> \r\n        </div>\r\n\t\t);\r\n\t\t\r\n      \r\n\t}\r\n\t \r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport App from './containers/App';\n\n\n\n\n\nReactDOM.render(\n\n  <React.StrictMode>\n     <App />\n  </React.StrictMode>,\n   document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}